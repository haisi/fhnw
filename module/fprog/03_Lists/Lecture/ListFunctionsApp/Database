("(++) :: [a] -> [a] -> [a]","[1,2] ++ [3,4,5] ~> [1,2,3,4,5]\r\n\"Hallo \" ++ show 12 ~> \"Hallo 12\"","H\228ngt zwei Listen aneinander.\r\nWird entsprechend verwendet um Strings zu konkatenieren.")
("","take 3 ['a','b','c','d','e'] ~> ['a','b','c']","")
("","","Wirft die ersten n Elemente weg.")
("(!!) :: [a] -> Int -> a","","")
("","","Gibt das letzte Element zur\252ck. ")
("","init ['a','b','c','d'] ~> ['a','b','c']","")
("","","Dreht eine Liste um.")
("elem :: Eq a => a -> [a] -> Bool","","")
("","maximum [1,4,3] ~> 4\r\nminimum [1,4,3] ~> 1","")
("","","Gibt die Summe/ das Produkt zur\252ck.\r\nDie Listenelemente m\252ssen von einem Zahlen Typen sein (Num).")
("zip :: [a] -> [b] -> [(a,b)]","","")
("","concat [[1],[2,3],[4]] ~> [1,2,3,4]\r\nconcat [\"abc\",\"def\"] ~> \"abcdef\"","")
("","zipWith (+) [1,2,3] [10,11,12] ~> [11,13,15]\r\nzipWith (++) [\"Ha\",\"Ec\"] [\"llo\",\"ho\"] ~> [\"Hallo\",\"Echo\"]","")
("","sadsaf","")
